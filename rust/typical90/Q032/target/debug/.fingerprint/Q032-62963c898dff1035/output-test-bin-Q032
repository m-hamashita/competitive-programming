{"message":"no rules expected the token `source`","code":null,"level":"error","spans":[{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":18224,"byte_end":18230,"line_start":578,"line_end":578,"column_start":50,"column_end":56,"is_primary":true,"text":[{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":50,"highlight_end":56}],"label":"no rules expected this token in macro call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":18384,"byte_end":18465,"line_start":581,"line_end":581,"column_start":9,"column_end":90,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":9,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":18654,"byte_end":18749,"line_start":585,"line_end":585,"column_start":9,"column_end":104,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":9,"highlight_end":104}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":18654,"byte_end":18749,"line_start":585,"line_end":585,"column_start":9,"column_end":104,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":9,"highlight_end":104}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17886,"byte_end":18045,"line_start":567,"line_end":573,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17649,"byte_end":17755,"line_start":558,"line_end":562,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":18476,"byte_end":18523,"line_start":582,"line_end":582,"column_start":9,"column_end":56,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":9,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":18654,"byte_end":18749,"line_start":585,"line_end":585,"column_start":9,"column_end":104,"is_primary":false,"text":[{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":9,"highlight_end":104}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17886,"byte_end":18045,"line_start":567,"line_end":573,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17649,"byte_end":17755,"line_start":558,"line_end":562,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":19373,"byte_end":19469,"line_start":603,"line_end":606,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $crate::input! {","highlight_start":9,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":38,"byte_end":154,"line_start":4,"line_end":9,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    input! {","highlight_start":5,"highlight_end":13},{"text":"        N: usize,","highlight_start":1,"highlight_end":18},{"text":"        V: [[usize; N]; N]","highlight_start":1,"highlight_end":27},{"text":"        M: usize,","highlight_start":1,"highlight_end":18},{"text":"        E: [(usize, usize, usize); M],","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":1},{"text":"    // terminator","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [$source]","highlight_start":1,"highlight_end":1},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [$source]","highlight_start":1,"highlight_end":1},{"text":"            @mut []","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [$source]","highlight_start":1,"highlight_end":1},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":1},{"text":"            @var $var","highlight_start":1,"highlight_end":1},{"text":"            @kind []","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":1},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":1},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":1},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":1},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":1},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":1},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":1},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":1},{"text":"        ));","highlight_start":1,"highlight_end":1},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":1},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":1},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"/Users/masakatsu.hamashita/.cargo/registry/src/github.com-1ecc6299db9ec823/proconio-0.4.3/src/lib.rs","byte_start":17297,"byte_end":19529,"line_start":545,"line_end":609,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! input {","highlight_start":1,"highlight_end":21},{"text":"    // terminator","highlight_start":1,"highlight_end":18},{"text":"    (@from [$source:expr] @rest) => {};","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse mutability","highlight_start":1,"highlight_end":24},{"text":"    (@from [$source:expr] @rest mut $($rest:tt)*) => {","highlight_start":1,"highlight_end":55},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [mut]","highlight_start":1,"highlight_end":23},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @rest $($rest:tt)*) => {","highlight_start":1,"highlight_end":51},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut []","highlight_start":1,"highlight_end":20},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse variable pattern","highlight_start":1,"highlight_end":30},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @rest $var:tt: $($rest:tt)*) => {","highlight_start":1,"highlight_end":79},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [$source]","highlight_start":1,"highlight_end":28},{"text":"            @mut [$($mut)*]","highlight_start":1,"highlight_end":28},{"text":"            @var $var","highlight_start":1,"highlight_end":22},{"text":"            @kind []","highlight_start":1,"highlight_end":21},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // parse kind (type)","highlight_start":1,"highlight_end":25},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest) => {","highlight_start":1,"highlight_end":91},{"text":"        let $($mut)* $var = $crate::read_value!(@source [$source] @kind [$($kind)*]);","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest, $($rest:tt)*) => {","highlight_start":1,"highlight_end":105},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)*] @rest);","highlight_start":1,"highlight_end":91},{"text":"        $crate::input!(@from [$source] @rest $($rest)*);","highlight_start":1,"highlight_end":57},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (@from [$source:expr] @mut [$($mut:tt)?] @var $var:tt @kind [$($kind:tt)*] @rest $tt:tt $($rest:tt)*) => {","highlight_start":1,"highlight_end":111},{"text":"        $crate::input!(@from [$source] @mut [$($mut)*] @var $var @kind [$($kind)* $tt] @rest $($rest)*);","highlight_start":1,"highlight_end":105},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    (from $source:expr, $($rest:tt)*) => {","highlight_start":1,"highlight_end":43},{"text":"        #[allow(unused_variables, unused_mut)]","highlight_start":1,"highlight_end":47},{"text":"        let mut s = $source;","highlight_start":1,"highlight_end":29},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut s]","highlight_start":1,"highlight_end":27},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($($rest:tt)*) => {","highlight_start":1,"highlight_end":24},{"text":"        let mut locked_stdin = $crate::STDIN_SOURCE.lock().expect(concat!(","highlight_start":1,"highlight_end":75},{"text":"            \"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":71},{"text":"            \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":78},{"text":"            \"Please report this issue from \",","highlight_start":1,"highlight_end":46},{"text":"            \"<https://github.com/statiolake/proconio-rs/issues>.\"","highlight_start":1,"highlight_end":66},{"text":"        ));","highlight_start":1,"highlight_end":12},{"text":"        $crate::input! {","highlight_start":1,"highlight_end":25},{"text":"            @from [&mut *locked_stdin]","highlight_start":1,"highlight_end":39},{"text":"            @rest $($rest)*","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        drop(locked_stdin); // release the lock","highlight_start":1,"highlight_end":48},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: no rules expected the token `source`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    input! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        N: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        V: [[usize; N]; N]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        M: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        E: [(usize, usize, usize); M],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno rules expected this token in macro call\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::input` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot find value `M` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":145,"byte_end":146,"line_start":8,"line_end":8,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"        E: [(usize, usize, usize); M],","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a local variable with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":145,"byte_end":146,"line_start":8,"line_end":8,"column_start":36,"column_end":37,"is_primary":true,"text":[{"text":"        E: [(usize, usize, usize); M],","highlight_start":36,"highlight_end":37}],"label":null,"suggested_replacement":"N","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `M` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:36\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        E: [(usize, usize, usize); M],\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a local variable with a similar name exists: `N`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0425`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0425`.\u001b[0m\n"}
